
namespace Deployer;

use \CMD\Str               as Str;
use \CMD\Display           as Display;
use \CMD\Deploy\DeployTool as DeployTool;

define('DIR', dirname(__FILE__, 3) . DIRECTORY_SEPARATOR);

function tmpErr($err) {
  echo "\n";
  echo " 錯誤，" . $err . "";
  echo "\n";
  echo "\n";
  exit(1);
}

$entry = @file_get_contents($path = DIR . 'System' . DIRECTORY_SEPARATOR . 'Entry.php');
$entry
  && preg_match_all('/define\s*\((["\'])(?P<kv>(?>[^"\'\\\]++|\\\.|(?!\1)["\'])*)\1?/', $entry, $entry)
  && $entry['kv']
  && in_array('MAPLE', $entry['kv'])
  || tmpErr('這不是 Maple 7 框架的專案吧！');

include_once $path;

\Load::system('Env')    ?: tmpErr('載入 System/Env 失敗！');
\Load::systemLib('Cmd') ?: tmpErr('載入 System/Lib/Cmd 失敗！');

foreach (config('Deploy') as $conf)
  if ($host = host($conf['stage'])->hostname($conf['host'])->user($conf['user']))
    foreach (['port', 'path', 'name', 'remote', 'branch', 'migration'] as $key)
      empty($conf[$key])
        || $host->set($key, $conf[$key]);

task("deploy:check", function() {

  $name = get("name", "");
  $path = get("path", [null]);  
  
  Display::title("檢查" . $name . "環境");
  
  is_string($path) || Display::error('請確認 Deploy Config 中' . ($name ? $name . '的' : '') . '「path」格式或值是否正確！');
  $path = rtrim($path, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;

  DeployTool::runCmd('檢查是否可以連線至伺服器', 'pwd', '請確認 Deploy Config 內的連線資訊是否正確！');
  DeployTool::dirExist('檢查專案目錄是否存在', $path, '伺服器上找不到此專案目錄，請上伺服器檢查專案目錄位置是否與 Deploy Config 內的設定相符！');
  DeployTool::cd('進入專案目錄', $path);
  DeployTool::dirExist('檢查是否為 Git 專案專案', '.git' . DIRECTORY_SEPARATOR, '此專案並不是 Git 管理的專案！');
  DeployTool::dirExistOrCreate('檢查部署目錄(.release)是否存在', 'File' . DIRECTORY_SEPARATOR . '.release' . DIRECTORY_SEPARATOR);
  DeployTool::dirExistOrCreate('檢查部署紀錄目錄(.log)是否存在', 'File' . DIRECTORY_SEPARATOR . '.release' . DIRECTORY_SEPARATOR . '.log' . DIRECTORY_SEPARATOR);
  DeployTool::checkCmd('檢查是否可以執行 Git 指令', 'git');
  DeployTool::checkCmd('檢查是否可以執行 PHP 指令', 'php');
  DeployTool::checkCmd('檢查是否可以執行 Maple7 指令', 'maple7');
})->shallow()->setPrivate();

task('deploy:gitPull', function() {
  $path = rtrim(get('path'), DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
  
  $remote = get('remote', 'origin');
  $remote && $remote = ' ' . $remote;

  Display::title("更新程式碼");
  DeployTool::cd('進入專案目錄', $path);
  $oriBr = DeployTool::getNowBr('取得目前分支', 'git branch --list');
  DeployTool::runCmd('更新程式碼', 'git pull' . $remote . ' ' . $oriBr);
})->shallow()->setPrivate();

task('deploy:migration', function() {
  $path = rtrim(get('path'), DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
  $migration = get('migration', '');

  Display::title("更新 Migration");
  DeployTool::cd('進入專案目錄', $path);
  
  $runMigrationNew = function() {
    DeployTool::runCmd('更新 Migration 版本', 'maple7 migration new', function($result) {
      if (!isJson($result))
        throw new \Exception('執行結果格式錯誤！');
      
      if ($result['status'] !== true)
        throw new \Exception('執行結果狀態錯誤！');

      return $result;
    });

    $result = DeployTool::runCmd('取得 Migration 版本', 'maple7 migration now', function($result) {
      if (!isJson($result))
        throw new \Exception('執行結果格式錯誤！');
      
      if ($result['status'] !== true)
        throw new \Exception('執行結果狀態錯誤！');

      return array_shift($result);
    });

    Display::line('確認目前 Migration 版本');
    Display::line(true, '第 ' . $result . ' 版');
  };

  if (!(is_array($migration) && isset($migration["branch"]) && $migration["branch"] !== ''))
    return $runMigrationNew();

  DeployTool::runCmd('更新專案', 'git fetch');

  $oriBr = DeployTool::getNowBr('取得目前分支', 'git branch --list');

  DeployTool::runCmd('切換分支', 'git checkout ' . $migration["branch"] . ' --quiet', '切換失敗，請手動上伺服器修正分支狀態！');
  $nowBr = DeployTool::getNowBr('取得目前分支', 'git branch --list');
  Display::line('比對分支', \Xterm::gray('執行指令')->dim() . Display::markSemicolon() . \Xterm::gray('[ "' . $nowBr . '" = "' . $migration["branch"] . '" ]')->dim()->italic()); if ($nowBr == $migration["branch"]) Display::line(true, '正確'); else Display::line(false, '切換失敗，請手動上伺服器修正分支狀態！');

  $remote = isset($migration['remote']) && $migration['remote'] !== '' ? ' ' . $migration['remote'] : '';
  $branch = isset($migration['branch']) && $migration['branch'] !== '' ? ' ' . $migration['branch'] : '';
  DeployTool::runCmd('更新分支', 'git pull' . $remote . $branch, '切換失敗，請手動上伺服器修正分支狀態。');

  $runMigrationNew();
  
  DeployTool::runCmd('切換分支', 'git checkout ' . $oriBr . ' --quiet', '切換失敗，請手動上伺服器修正分支狀態。');

  $nowBr = DeployTool::getNowBr('取得目前分支', 'git branch --list');
  Display::line('比對分支', \Xterm::gray('執行指令')->dim() . Display::markSemicolon() . \Xterm::gray('[ "' . $nowBr . '" = "' . $oriBr . '" ]')->dim()->italic()); if ($nowBr == $oriBr) Display::line(true, '正確'); else Display::line(false, '切換失敗，請手動上伺服器修正分支狀態！');
})->shallow()->setPrivate();

task('deploy:clean', function() {
  $path = rtrim(get('path'), DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;

  $runClean = function($title, $dir) {
    DeployTool::runCmd('清除' . $title . '目錄', 'maple7 clean ' . $dir, function($result) {
      if (!isJson($result))
        throw new \Exception('執行結果格式錯誤！');
      
      if ($result['status'] !== true)
        throw new \Exception('執行結果狀態錯誤！');

      return $result;
    });
  };

  Display::title("清除目錄");
  DeployTool::cd('進入專案目錄', $path);
  $runClean('快取', 'cache');
  $runClean('暫存', 'tmp');
})->shallow()->setPrivate();

task("deploy:lock", function() {
  $path = rtrim(get('path'), DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
  $lockPath = "File" . DIRECTORY_SEPARATOR . '.release' . DIRECTORY_SEPARATOR . 'deploy.lock';

  Display::title("鎖定專案");
  DeployTool::cd('進入專案目錄', $path);
  DeployTool::fileNotExist('檢查部署檔案(deploy.lock)是否被鎖定', $lockPath, ['部署機制已被鎖，請確認上次部署是否正常結束！', '詳細資訊請上伺服器檢視部署檔案(deploy.lock)！']);
  DeployTool::lock('鎖定專案', $lockPath, '部署機制鎖定時失敗，詳細資訊請上伺服器檢視部署檔案(deploy.lock)！');
})->shallow()->setPrivate();

task("deploy:unlock", function() {
  $path = rtrim(get('path'), DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;
  $lockPath = "File" . DIRECTORY_SEPARATOR . '.release' . DIRECTORY_SEPARATOR . 'deploy.lock';
  $logPath  = "File" . DIRECTORY_SEPARATOR . '.release' . DIRECTORY_SEPARATOR . '.log' . DIRECTORY_SEPARATOR;
  $name = date('Ymd') . '.log';

  Display::title("解鎖專案");
  DeployTool::cd('進入專案目錄', $path);
  DeployTool::fileExist('檢查部署檔案(deploy.lock)是否鎖定中', $lockPath, '部署機制有誤，請通知專案管理人員！');
  DeployTool::fileExistOrCreate('檢查部署紀錄檔案是否存在', $logPath . $name, '部署紀錄檔案不存在，請通知專案管理人員！');
  DeployTool::copyLockInfo('建立部署紀錄', $lockPath, $logPath, $name, '建立紀錄失敗，請通知專案管理人員！');
  DeployTool::unlock('解鎖專案', $lockPath, '部署機制解鎖失敗，詳細資訊請上伺服器檢視部署檔案(deploy.lock)！');
})->shallow()->setPrivate();

task("deploy", [
  "deploy:check",
  "deploy:lock",
  "deploy:gitPull",
  "deploy:migration",
  "deploy:clean",
  "deploy:unlock",
])->shallow();

task("deploy:success", function() {
  Display::title('本地環境恢復');
  Display::line('刪除 deploy.php 部署檔案', \Xterm::gray('執行指令')->dim() . Display::markSemicolon() . \Xterm::gray('rm -f deploy.php')->dim()->italic());
  
  @unlink(__FILE__);
  !file_exists(__FILE__) || Display::line(false, '刪除檔案失敗！');
  Display::line(true);

  Display::title('完成');
  Display::markListLine('太好惹！目前伺服器上的專案已經是最新版本了！');

  echo Display::LN;
})->local()->shallow()->setPrivate();

after("deploy", "deploy:success");